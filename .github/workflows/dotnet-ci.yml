name: Dotnet CI
on:
  workflow_call:
    inputs:
      branch:
        required: false
        type: string
        default: "main"
        description: "The branch to run the workflow on"
      working-directory:
        required: true
        type: string
        default: "main"
        description: "The working directory to run the workflow in"
      sln-project-path:
        required: true
        type: string
        description: "The Visual Studio solution or project file path"
      test-project-path:
        required: false
        type: string
        description: "The Visual Studio test project file path"
      dotnet-version:
        required: false
        type: string
        default: "8.0.x"
        description: "The version of dotnet to use, defaults to 8.0.x"
      artifact-name:
        required: false
        type: string
        description: "The name of the published artifact"

jobs:
  build-dotnet:
    name: Build dotnet
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
    env:
      PROJECT_ROOT_PATH: "${{ github.workspace }}/${{ inputs.working-directory }}"
      PROJECT_FULL_PATH: "${{ github.workspace }}/${{ inputs.working-directory }}/${{ inputs.sln-project-path }}"
      TEST_FULL_PATH: "${{ github.workspace }}/${{ inputs.working-directory }}Test/${{ inputs.test-project-path }}"
      AZURE_FUNCTIONAPP_NAME: "ghal-dev-fa"
      AZURE_WEBAPP_NAME: "ghal-dev-wa"
      DOTNET_VERSION: ${{ inputs.dotnet-version }}
      # ARCHIVE_FILE_NAME: ${{ inputs.artifact-name }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup dotnet ${{ env.DOTNET_VERSION }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
          source-url: https://nuget.pkg.github.com/lmcwhirt-insight/index.json
        env:
          NUGET_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install GitVersion
        uses: GitTools/actions/gitversion/setup@v0
        with:
          versionSpec: "5.x"
          preferLatestVersion: true

      - name: Determine version
        id: gitversion
        uses: GitTools/actions/gitversion/execute@v0

      - name: Dotnet restore
        run: dotnet restore

      - name: Echo PROJECT_ROOT_PATH
        run: echo ${{ env.PROJECT_ROOT_PATH }}

      - name: Echo PROJECT_FULL_PATH
        run: echo ${{ env.PROJECT_FULL_PATH }}

      - name: Dotnet build
        run: dotnet build --no-restore --configuration Release /p:Version=${{ format('{0}.{1}.{2}', steps.gitversion.outputs.major, steps.gitversion.outputs.minor, steps.gitversion.outputs.buildMetaData) }}

      - name: Dotnet test
        if: ${{ inputs.test-project-path != null }}
        run: dotnet test --no-restore --results-directory "${{ env.PROJECT_ROOT_PATH }}/TestResults-${{ env.DOTNET_VERSION }}" "${{ env.TEST_FULL_PATH}}"

      - name: Upload dotnet test results
        uses: actions/upload-artifact@v4
        with:
          name: dotnet-test-results-${{ env.DOTNET_VERSION }}
          path: '${{ env.PROJECT_ROOT_PATH }}/TestResults-${{ env.DOTNET_VERSION }}'
        if: ${{ inputs.test-project-path != null && always() }}

      - name: Dotnet publish
        run: dotnet publish -c Release -o '${{ env.PROJECT_ROOT_PATH }}/api-publish'

      - name: Dir - ls -la '${{ env.PROJECT_ROOT_PATH }}/api-publish'
        run: ls -la '${{ env.PROJECT_ROOT_PATH }}/api-publish'

      - name: Dir - ls -la ${{ env.PROJECT_ROOT_PATH }}
        run: ls -la ${{ env.PROJECT_ROOT_PATH }}

      - name: Set archive file name environment variable
        run: |
          echo "ARCHIVE_FILE_NAME=$(echo '${{ inputs.artifact-name != '' && inputs.artifact-name || inputs.sln-project-path }}' | sed 's/\.[^.]*$//')" >> $GITHUB_ENV
          echo "ARCHIVE_FILE_NAME=" $ARCHIVE_FILE_NAME
          zip -v $ARCHIVE_FILE_NAME.zip '${{ env.PROJECT_ROOT_PATH }}/api-publish'

      - name: Echo archive file name environment variable
        run: |
          echo "ARCHIVE_FILE_NAME=" $ARCHIVE_FILE_NAME

      # - name: Zip API files
      #   run: |
      #     echo "ARCHIVE_FILE_NAME=$(echo '${{ env.PROJECT_ROOT_PATH }}/${{ inputs.artifact-name || inputs.sln-project-path  }}' | sed 's/\.[^.]*$//')" >> $GITHUB_ENV
      #     echo $ARCHIVE_FILE_NAME
      #     zip -v '$ARCHIVE_FILE_NAME.zip' '${{ env.PROJECT_ROOT_PATH }}/api-publish'

      - name: Dir - ls -la ${{ env.PROJECT_ROOT_PATH }}
        run: ls -la ${{ env.PROJECT_ROOT_PATH }}

      - name: Dir - ls -la '${{ env.PROJECT_ROOT_PATH }}/api-publish'
        run: ls -la '${{ env.PROJECT_ROOT_PATH }}/api-publish'

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: api-function-package
          path: '${{ env.PROJECT_ROOT_PATH }}/api-publish/'
