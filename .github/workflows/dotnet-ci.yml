name: Dotnet CI
on:
  workflow_call:
    inputs:
      branch:
        required: false
        type: string
        default: "main"
        description: "The branch to run the workflow on"
      working-directory:
        required: true
        type: string
        default: "main"
        description: "The working directory to run the workflow in"
      sln-project-path:
        required: true
        type: string
        default: "The Visual Studio solution or project file path"
      dotnet-version:
        required: false
        type: string
        default: "8.0.x"
        description: "The version of dotnet to use, defaults to 8.0.x"

jobs:
  build-dotnet:
    name: Build dotnet
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
    env:
      PROJECT_BASE_PATH: "${{ github.workspace }}/${{ inputs.working-directory }}/${{ inputs.sln-project-path }}"
      AZURE_FUNCTIONAPP_NAME: "ghal-dev-fa"
      AZURE_WEBAPP_NAME: "ghal-dev-wa"
      DOTNET_VERSION: ${{ inputs.dotnet-version }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
         fetch-depth: 0

      - name: Setup dotnet ${{ env.DOTNET_VERSION }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
          source-url: https://nuget.pkg.github.com/lmcwhirt-insight/index.json
        env:
          NUGET_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install GitVersion
        uses: GitTools/actions/gitversion/setup@v0
        with:
            versionSpec: "5.x"
            preferLatestVersion: true

      - name: Determine version
        id: gitversion
        uses: GitTools/actions/gitversion/execute@v0

      - name: Install dependencies
        run: dotnet restore

    # - name: Build
    #  run: dotnet build --no-restore --configuration Release /p:Version=${{ format('{0}.{1}.{2}', steps.gitversion.outputs.major, steps.gitversion.outputs.minor, steps.gitversion.outputs.buildMetaData) }}

    # - name: Test with the dotnet CLI
    #  run: dotnet test --no-restore --results-directory "${{ env.PROJECT_BASE_PATH }}/TestResults-${{ matrix.dotnet-version }}" ../GitHubActionsWebApiTest/GitHubActionsWebApiTest.csproj

    # - name: Upload dotnet test results
    #  uses: actions/upload-artifact@v4
    #  with:
    #   name: dotnet-test-results-${{ matrix.dotnet-version }}
    #   path: '${{ env.PROJECT_BASE_PATH }}/TestResults-${{ matrix.dotnet-version }}'
    #  # Use always() to always run this step to publish test results when there are test failures
    #  if: ${{ always() }}

    # - name: Publish the project
    #  run: dotnet publish -c Release -o '${{ env.PROJECT_BASE_PATH }}/api-publish'

    # - name: Upload build artifact
    #  uses: actions/upload-artifact@v4
    #  with:
    #   name: api-function-package
    #   path: '${{ env.PROJECT_BASE_PATH }}/api-publish/'
